{"version":3,"sources":["nicholas/math.cljs"],"mappings":";;;AAGA,AAAA,AAAMA,AAAkBC,AAAKC;AAA7B,AAAA,AAAA,AAAA,AAAA,AACM,AAAA,AAAK,AAACC,AAAKF,AAAU,AAAA,AAAK,AAACE,AAAKD,AAAWE;;AAEjD,AAAA,AAAMC,AAAeC,AAAIC;AAAzB,AACE,AAAMC,AAAQ,AAACC,AAAMC,AAAI,AAACC,AAAOJ,AAAO,AAAA,AAACK;AAAzC,AACON,AACL,AAAKE,AACL,AAACK,AACD,AAACC,AAAKP,AACN,AAACM,AACD,AAACJ,AAAMC;;AAEX,AAAA,AAAMK;AAAN,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAMC;AAMAC,AAAM,AAACC,AAAMF;AACbG,AAAa,AAAA,AAAK,AAAChB,AAAKc;AAP9B,AAQE,AAACG,AAAIJ,AAAOG;;AAEhB,AAAA,AAAME,AAAUpB,AAAKC;AAArB,AACE,AAAMwB,AAAK,AAACC,AAAO,AAAC3B,AAAiBC,AAAKC;AAA1CoB,AAAA,AAAAC,AACoBG;AADpBJ,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAE,AAAA,AAAAF,AAAA,AAAA,AAAA,AAAA,AAAAb,AAAAgB,AAAAH,AAAAA;AAAA,AAAAF,AAAAE,AAAA,AACUM;AADV,AAAAR,AAAAE,AAAA,AACYO;AADZ,AAAAT,AAAAE,AAAA,AACcQ;AADd,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGQ,AAAA,AAACzB,AAAcuB,AACX,AAAA,AAACvB,AAAcwB,AAEhB,AAAA,AAACjB,AAKJ,AAAKmB;AAAL,AACE,AAAM,AAAA,AAACC,AAAK,AAAYD;AAAxB,AACE,AAAME,AAAU,AAAKF,AAAmB,AAAA,AAAA,AAAA,AAACG,AAAc,AAACzB,AAAMC,AAAKyB;AAAnE,AACE,AAAM,AAACH,AAAEC,AAAU,AAACH,AAAAA,AAAAA,AAAGF,AAAAA,AAAEC,AAAAA;AAAzB,AACE,AAACO,AAAS,AAACrB;;AACX,AAAA,AAAM,AAAA,AAAIgB;;AACV,AAACM,AAAOX,AAAK,AAAC1B,AAAiBC,AAAKC;;AAHtC;;;AAFJ","names":["nicholas.math/generate-numbers","max1","max2","cljs.core.rand","cljs.core/+","nicholas.math/format-number","num","spaces","padding","cljs.core.apply","cljs.core/str","cljs.core.repeat","cljs.core/char","cljs.core/reverse","cljs.core.take","nicholas.math/get-emoji","emojis","total","cljs.core/count","picked-index","cljs.core.get","nicholas.math/question","map__27081","cljs.core/deref","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","data","reagent.core.atom","a","b","op","e","cljs.core._EQ_","my-answer","cljs.core/re-seq","js/parseInt","js/alert","cljs.core/reset!"],"sourcesContent":["(ns nicholas.math\r\n  (:require [reagent.core :as r]))\r\n\r\n(defn generate-numbers [max1 max2]\r\n  {:a (int (rand max1)) :b (int (rand max2)) :op +})\r\n\r\n(defn format-number [num spaces]\r\n  (let [padding (apply str (repeat spaces (char 160)))]\r\n    (->> num\r\n    (str padding)\r\n    (reverse)\r\n    (take spaces)\r\n    (reverse)\r\n    (apply str))))\r\n\r\n(defn get-emoji []\r\n  (let [emojis [\"\ud83d\ude00\" \"\ud83d\ude03\" \"\ud83d\ude04\" \"\ud83d\ude01\" \"\ud83d\ude06\" \"\ud83d\ude05\" \"\ud83e\udd23\" \"\ud83d\ude02\" \"\ud83d\ude42\" \"\ud83d\ude43\" \r\n                \"\ud83d\ude09\" \"\ud83d\ude0a\" \"\ud83d\ude07\" \"\ud83d\ude0d\" \"\ud83d\ude18\" \"\ud83d\ude17\" \"\ud83d\ude1a\" \"\ud83d\ude19\" \"\ud83d\ude0b\" \"\ud83d\ude1b\" \r\n                \"\ud83d\ude1c\" \"\ud83c\udf47\" \"\ud83c\udf48\" \"\ud83c\udf49\" \"\ud83c\udf4a\" \"\ud83c\udf4b\" \"\ud83c\udf4c\" \"\ud83c\udf4d\" \"\ud83c\udf4e\" \"\ud83c\udf4f\" \r\n                \"\ud83c\udf50\" \"\ud83c\udf51\" \"\ud83c\udf52\" \"\ud83c\udf53\" \"\ud83e\udd5d\" \"\ud83c\udf45\" \"\ud83e\udd51\" \"\ud83c\udf46\" \"\ud83e\udd54\" \"\ud83e\udd55\" \r\n                \"\ud83c\udf3d\" \"\ud83c\udf36\" \"\ud83e\udd52\" \"\ud83c\udf44\" \"\ud83e\udd5c\" \"\ud83c\udf30\" \"\ud83c\udf5e\" \"\ud83e\udd50\" \"\ud83e\udd56\" \"\ud83e\udd5e\" \r\n                \"\ud83e\uddc0\" \"\ud83c\udf56\" \"\ud83c\udf57\" \"\ud83e\udd53\" \"\ud83c\udf54\" \"\ud83c\udf5f\" \"\ud83c\udf55\" \"\ud83c\udf2d\" \"\ud83c\udf2e\" \"\u26bd\"]\r\n        total (count emojis)\r\n        picked-index (int (rand total))]\r\n    (get emojis picked-index)))\r\n\r\n(defn question [max1 max2]\r\n  (let [data (r/atom (generate-numbers max1 max2))\r\n    {:keys [a b op]} @data]\r\n    [:div.math.large\r\n      [:p (format-number a 3)]\r\n      [:p \"+\" (format-number b 2)]\r\n      [:hr]\r\n      [:span (char 160)]     \r\n      [:input.large.right \r\n        {:type \"text\"\r\n         :size 2\r\n         :on-key-press \r\n          (fn [e]\r\n            (when (= 13 (.-charCode e))\r\n              (let [my-answer (->> e .-target .-value (re-seq #\"\\d\") (apply str) js/parseInt)]\r\n                (when (= my-answer (op a b))\r\n                  (js/alert (get-emoji))\r\n                  (set! (.. e -target -value) \"\")\r\n                  (reset! data (generate-numbers max1 max2))))))}]]))\r\n\r\n"]}