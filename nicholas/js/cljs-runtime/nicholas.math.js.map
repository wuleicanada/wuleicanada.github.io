{"version":3,"sources":["nicholas/math.cljs"],"mappings":";;;AAGA,AAAKA,AAAS,AAACC,AAAKC,AAAIC;AAExB,AAAA,AAAMC,AAAkBC,AAAKC;AAA7B,AAAA,AAAA,AAAA,AAAA,AACM,AAACN,AAASK,AAAS,AAACL,AAASM,AAAUC;;AAE7C,AAAA,AAAMC,AAAeC,AAAIC;AAAzB,AACE,AAAMC,AAAQ,AAACC,AAAMC,AAAI,AAACC,AAAOJ,AAAO,AAAA,AAACK;AAAzC,AACON,AACL,AAAKE,AACL,AAACK,AACD,AAACC,AAAKP,AACN,AAACM,AACD,AAACJ,AAAMC;;AAEX;;;AAAA,AAAMK,AAEHC;AAFH,AAGE,AAAMC,AAAM,AAACC,AAAMF;AACbG,AAAa,AAACtB,AAASoB;AAD7B,AAEE,AAACG,AAAIJ,AAAIG;;AAGb,AAAA,AAAME;AAAN,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAMC;AAAN,AAOE,AAACP,AAASO;;AAEd,AAAA,AAAMC;AAAN,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAMC;AAAN,AAEE,AAACT,AAASS;;AAEd,AAAA,AAAMC,AAAUvB,AAAKC;AAArB,AACE,AAAM2B,AAAK,AAACC,AAAO,AAAC9B,AAAiBC,AAAKC;AAA1CuB,AAAA,AAAAC,AACoBG;AADpBJ,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAE,AAAA,AAAAF,AAAA,AAAA,AAAA,AAAA,AAAAjB,AAAAoB,AAAAH,AAAAA;AAAA,AAAAN,AAAAM,AAAA,AACUM;AADV,AAAAZ,AAAAM,AAAA,AACYO;AADZ,AAAAb,AAAAM,AAAA,AACcQ;AADd,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGQ,AAAA,AAAC7B,AAAc2B,AACX,AAAA,AAAC3B,AAAc4B,AAEhB,AAAA,AAACrB,AAKJ,AAAKuB;AAAL,AACE,AAAM,AAAA,AAACC,AAAK,AAAYD;AAAxB,AACE,AAAME,AAAU,AAAKF,AAAmB,AAAA,AAAA,AAAA,AAACG,AAAc,AAAC7B,AAAMC,AAAK6B;AAAnE,AACE,AAAM,AAACH,AAAEC,AAAU,AAACH,AAAAA,AAAAA,AAAGF,AAAAA,AAAEC,AAAAA;AAAzB,AACE,AAACO,AAAS,AAAA,AAAK,AAACjB,AAAoB,AAACF;;AACrC,AAAA,AAAM,AAAA,AAAIc;;AACV,AAACM,AAAOX,AAAK,AAAC7B,AAAiBC,AAAKC;;AAHtC;;;AAFJ","names":["nicholas.math/int-rand","cljs.core.comp","cljs.core/int","cljs.core/rand","nicholas.math/generate-numbers","max1","max2","cljs.core/+","nicholas.math/format-number","num","spaces","padding","cljs.core.apply","cljs.core/str","cljs.core.repeat","cljs.core/char","cljs.core/reverse","cljs.core.take","nicholas.math/pick-one","col","total","cljs.core/count","random-index","cljs.core.get","nicholas.math/get-emoji","emojis","nicholas.math/get-compliment","compliments","nicholas.math/question","map__27091","cljs.core/deref","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","data","reagent.core.atom","a","b","op","e","cljs.core._EQ_","my-answer","cljs.core/re-seq","js/parseInt","js/alert","cljs.core/reset!"],"sourcesContent":["(ns nicholas.math\r\n  (:require [reagent.core :as r]))\r\n\r\n(def int-rand (comp int rand))\r\n\r\n(defn generate-numbers [max1 max2]\r\n  {:a (int-rand max1) :b (int-rand max2) :op +})\r\n\r\n(defn format-number [num spaces]\r\n  (let [padding (apply str (repeat spaces (char 160)))]\r\n    (->> num\r\n    (str padding)\r\n    (reverse)\r\n    (take spaces)\r\n    (reverse)\r\n    (apply str))))\r\n\r\n(defn pick-one \r\n  \"Randomly pick one item from a collection\"\r\n  [col]\r\n  (let [total (count col)\r\n        random-index (int-rand total)]\r\n    (get col random-index)))\r\n\r\n\r\n(defn get-emoji []\r\n  (let [emojis [\"\ud83d\ude00\" \"\ud83d\ude03\" \"\ud83d\ude04\" \"\ud83d\ude01\" \"\ud83d\ude06\" \"\ud83d\ude05\" \"\ud83e\udd23\" \"\ud83d\ude02\" \"\ud83d\ude42\" \"\ud83d\ude43\" \r\n                \"\ud83d\ude09\" \"\ud83d\ude0a\" \"\ud83d\ude07\" \"\ud83d\ude0d\" \"\ud83d\ude18\" \"\ud83d\ude17\" \"\ud83d\ude1a\" \"\ud83d\ude19\" \"\ud83d\ude0b\" \"\ud83d\ude1b\" \r\n                \"\ud83d\ude1c\" \"\ud83c\udf47\" \"\ud83c\udf48\" \"\ud83c\udf49\" \"\ud83c\udf4a\" \"\ud83c\udf4b\" \"\ud83c\udf4c\" \"\ud83c\udf4d\" \"\ud83c\udf4e\" \"\ud83c\udf4f\" \r\n                \"\ud83c\udf50\" \"\ud83c\udf51\" \"\ud83c\udf52\" \"\ud83c\udf53\" \"\ud83e\udd5d\" \"\ud83c\udf45\" \"\ud83e\udd51\" \"\ud83c\udf46\" \"\ud83e\udd54\" \"\ud83e\udd55\" \r\n                \"\ud83c\udf3d\" \"\ud83c\udf36\" \"\ud83e\udd52\" \"\ud83c\udf44\" \"\ud83e\udd5c\" \"\ud83c\udf30\" \"\ud83c\udf5e\" \"\ud83e\udd50\" \"\ud83e\udd56\" \"\ud83e\udd5e\" \r\n                \"\ud83e\uddc0\" \"\ud83c\udf56\" \"\ud83c\udf57\" \"\ud83e\udd53\" \"\ud83c\udf54\" \"\ud83c\udf5f\" \"\ud83c\udf55\" \"\ud83c\udf2d\" \"\ud83c\udf2e\" \"\u26bd\"\r\n                \"\u2764\ufe0f\" \"\ud83d\udc4d\" \"\ud83d\udd90\ufe0f\" \"\ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc66\" \"\ud83d\udca1\" \"\u26cf\ufe0f\" \"\ud83d\udef4\" \"\ud83d\udeb2\" \"\ud83d\udcaf\" \"\ud83c\udfc0\"]]\r\n    (pick-one emojis)))\r\n\r\n(defn get-compliment []\r\n  (let [compliments [\"Good job!\" \"Great!\" \"Awesome!\" \"Excellent!\" \"You're so smart!\" \r\n                     \"Bon travail!\" \"Nice work!\" \"Gut gemacht!\" \"Ausgezeichnet!\" \"Well done!\"]]\r\n    (pick-one compliments)))\r\n\r\n(defn question [max1 max2]\r\n  (let [data (r/atom (generate-numbers max1 max2))\r\n    {:keys [a b op]} @data]\r\n    [:div.math.large\r\n      [:p (format-number a 3)]\r\n      [:p \"+\" (format-number b 2)]\r\n      [:hr]\r\n      [:span (char 160)]     \r\n      [:input.large.right \r\n        {:type \"text\"\r\n         :size 2\r\n         :on-key-press \r\n          (fn [e]\r\n            (when (= 13 (.-charCode e))\r\n              (let [my-answer (->> e .-target .-value (re-seq #\"\\d\") (apply str) js/parseInt)]\r\n                (when (= my-answer (op a b))\r\n                  (js/alert (str (get-compliment) \" \" (get-emoji)))\r\n                  (set! (.. e -target -value) \"\")\r\n                  (reset! data (generate-numbers max1 max2))))))}]]))\r\n\r\n"]}