<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Octopress Blog]]></title>
  <link href="http://wuleicanada.github.io/atom.xml" rel="self"/>
  <link href="http://wuleicanada.github.io/"/>
  <updated>2014-08-19T15:34:26+00:00</updated>
  <id>http://wuleicanada.github.io/</id>
  <author>
    <name><![CDATA[Lei Wu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sinatra, JBoss 6, JDBC and ActiveRecord]]></title>
    <link href="http://wuleicanada.github.io/blog/2014/08/18/sinatra-jboss-jdbc-activerecord/"/>
    <updated>2014-08-18T17:58:16+00:00</updated>
    <id>http://wuleicanada.github.io/blog/2014/08/18/sinatra-jboss-jdbc-activerecord</id>
    <content type="html"><![CDATA[<p>The article describes how to create a JRuby Sinatra web application and deploy it on JBoss 6. I use JDBC and ActiveRecord to interact with a SQL Server database.</p>

<h2>Set up dev environment on Windows 7</h2>

<h3>Install JRuby</h3>

<p>For Windows 7, just download and install the <code>exe(x64)</code> executable.</p>

<h2>Create the App</h2>

<p>Let&rsquo;s create a folder with the same name of our JBoss application context.</p>

<p><code>md myapp</code></p>

<p><code>cd myapp</code></p>

<h3>Install necessary gems</h3>

<p>First things first, install Bundler <code>jruby --command gem install bundler</code>.</p>

<p>Now we&rsquo;ll create the Gemfile with the following content:</p>

<pre><code class="ruby">source "http://rubygems.org"

gem "sinatra"
gem "activerecord"
gem "sinatra-activerecord"
gem 'activerecord-jdbc-adapter'
gem 'sinatra-formhelpers-ng'


group :development do
  gem "tux"
end
</code></pre>

<p>And run <code>jruby --command bundle install</code> to get the gems ready.</p>

<p>Note: The <code>tux</code> gem works as a console to interact with my Sinatra application. I would also love to have the <code>shotgun</code> gem, but unfortuantely it&rsquo;s unavaible for JRuby.</p>

<p>The JDBC driver (<code>sqljdbc4.jar</code>) for SQL Server can be downloaded from Microsoft&rsquo;s web site. We&rsquo;ll just save it to our application root.</p>

<h3>SQL Server table</h3>

<p>Our application will use one table called &ldquo;users&rdquo;.</p>

<pre><code class="sql">CREATE TABLE [users](
    [id] [int] IDENTITY(1,1) NOT NULL,
    [firstname] [varchar](32) NULL,
    [lastname] [varchar](32) NULL,
    [email] [varchar](64) NULL,
 CONSTRAINT [PK_users] PRIMARY KEY CLUSTERED 
(
    [id] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
</code></pre>

<h3>Code the application</h3>

<p>Our classic style Sinatra application consists of the following</p>

<p>config.ru</p>

<pre><code class="ruby">require File.join(File.dirname(__FILE__), 'app')
run Sinatra::Application
</code></pre>

<p>app.rb</p>

<pre><code class="ruby">require 'rubygems'
require "sinatra"
require "sinatra/activerecord"
require 'sinatra/form_helpers'
require 'active_record'
require 'active_record/connection_adapters/jdbc_adapter'
require 'sqljdbc4.jar'


config_dev = {
    :adapter =&gt; "jdbc", 
    :driver =&gt; "com.microsoft.sqlserver.jdbc.SQLServerDriver",  
    :url =&gt; "jdbc:sqlserver://SERVER:1433;databaseName=DB_NAME", 
    :username =&gt; "USER", 
    :password =&gt; "PASS"
}

config_jboss = {
    :adapter =&gt; "jdbc", 
    :driver =&gt; "com.microsoft.sqlserver.jdbc.SQLServerDriver",  
    :jndi =&gt; "DATASOURCE_NAME"
}

ActiveRecord::Base.establish_connection(defined?($servlet_context) ? config_jboss : config_dev)

class User &lt; ActiveRecord::Base
    validates :consent, acceptance: true, presence: true
    validates :firstname, presence: true
    validates :lastname, presence: true
    validates :email, presence: true, format: { with: /\A[^@]+@([^@\.]+\.)+[^@\.]+\z/ }
end


helpers do
    def h(text)
        Rack::Utils.escape_html(text)
    end
end


get "/users" do
    @users = User.take(10)
    erb :"users/index"
end


get "/users/:id" do
    @user = User.find(params[:id])
    erb :"users/show"
end

put "/users/:id" do
    @user = User.find(params[:id])
    if @user.update_attributes(params[:user])
        redirect '/users'
    else
        erb :"users/show"
    end
end
</code></pre>

<h2>Deploy to JBoss 6</h2>

<h3>Create WAR file using Warbler</h3>

<p>First step is to install Warbler as a gem <code>jruby --command gem install warbler</code>. Next, we need to configure Warbler:</p>

<ul>
<li>Create a new folder called <code>config</code> under our application root</li>
<li>Run <code>jruby --command warble config</code>, which generates a configuration template called <code>warble.rb</code> under the <code>config</code> folder</li>
<li>Edit <code>config\warble.rb</code> and update these lines:</li>
</ul>


<pre><code class="ruby">    # Application directories to be included in the webapp.
    config.dirs = %w(views)

    # Additional files/directories to include, above those in config.dirs
    config.includes = FileList['app.rb', 'sqljdbc4.jar']

    # Uncomment this if you don't want to package rails gem.
    config.gems -= ["rails"]
</code></pre>

<p>Now we&rsquo;re ready to rock and roll: <code>jruby --command warble</code></p>

<p>A war file will be created.</p>

<h3>Deploy the WAR file</h3>

<p>I tried the JBoss 6 Admin console first, but got an Out of Memory error. I worked around it by copying the WAR file to the deploy folder (in my case
<code>/usr/jboss6/server/default/deploy/</code>) and restarting JBoss.</p>
]]></content>
  </entry>
  
</feed>
